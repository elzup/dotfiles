
" NeoBundleOptions{{{
"head{{{
"neobundle
scriptencoding utf-8
set nocompatible

filetype off

for path in split(glob($HOME.'/.vim/bundle/*'), '\n')
    if isdirectory(path) | let &runtimepath = &runtimepath.','.path | end
endfor

""vundle option
"set runtimepath+='$HOME\.vim\bundle\'
"call vundle#rc()

"neobundle.vim option 
call neobundle#rc(expand('$HOME\.vim\bundle'))
"head}}}
"bundles {{{
"neobundle 
NeoBundle 'Shougo/neobundle.vim.git'
NeoBundle 'Shougo/neocomplcache.git'
NeoBundle 'Shougo/unite.vim.git'
NeoBundle 'Shougo/vimfiler.git'
NeoBundle 'Shougo/vimshell.vim'
NeoBundle 'scrooloose/syntastic.git'
NeoBundle 'scrooloose/nerdtree.git'
"NeoBundle 'Shougo/neocomplete.vim'

"utility view
NeoBundle 'tpope/vim-markdown'
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'LeafCage/foldCC'
"NeoBundle 'yonchu/accelerated-smooth-scroll'

"utility input
NeoBundle 'Shougo/neosnippet'
NeoBundle 'thinca/vim-splash'
NeoBundle 'osyo-manga/vim-over'
NeoBundle 'tpope/vim-surround'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'coderifous/textobj-word-column.vim'
NeoBundle 'kana/vim-operator-replace.git'
NeoBundle 'kana/vim-operator-user.git'
NeoBundle 'haya14busa/vim-easymotion'

"tool
NeoBundle 'kien/ctrlp.vim.git'
NeoBundle 'mbbill/undotree'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'cocopon/colorswatch.vim'
NeoBundle 'AndrewRadev/linediff.vim'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'mhinz/vim-startify'


"NeoBundle 'YankRing.vim'
"NeoBundle 'mru.git'
"NeoBundle 'mttn/zen-coding.vim'
"NeoBundle 'emmet-vim'

"html support
NeoBundle 'Emmet.vim'
"NeoBundle 'hokaccha/endtagcomment.vim'

"sublime text 2 NeoBundle 'mattn/multi-vim'
"NeoBundle 'koron/minimap-vim'
NeoBundle 'koron/minimap-vim'

" sound
NeoBundle 'osyo-manga/vim-sound'

"language
" less 
NeoBundle 'groenewege/vim-less'

"Lua
NeoBundle 'lua-support'
NeoBundle 'luarefvim'

"Game
"NeoBundle 'amix/vim-2048'
NeoBundle 'AshyIsMe/2048'
"NewGame2048
NeoBundle 'thinca/vim-threes'
"ThreesStart
"NeoBundle 'sudoku_game'
"Sudoku~~
NeoBundle 'mfumi/viminesweeper'
"MineSweeper
NeoBundle 'TeTrls.vim'
"
NeoBundle 'mattn/invader-vim'
"Invader
NeoBundle 'deris/vim-duzzle'
"DuzzleStart
"nmap ,gt :source<Space>TeTrls.vim<Enter>


"twitter
NeoBundle 'basyura/TweetVim'
NeoBundle 'mattn/webapi-vim'
NeoBundle 'basyura/twibill.vim'
NeoBundle 'tyru/open-browser.vim'
NeoBundle 'h1mesuke/unite-outline'
NeoBundle 'basyura/bitly.vim'
"NeoBundle 'TwitVim'

"git
NeoBundle 'tpope/vim-fugitive'

"colorscheme
NeoBundle 'ujihisa/unite-colorscheme'
NeoBundle 'vim-scripts/phd'
NeoBundle 'vim-scripts/summerfruit256.vim'
NeoBundle 'sjl/badwolf'

filetype plugin on
filetype indent on
"bundles -end}}}
"NeoBundle -end}}}

"Startup options {{{
set nocompatible
set clipboard+=unnamed
set modifiable
set write
set go=arc
set tw=0
source $VIMRUNTIME/delmenu.vim
set langmenu=ja_jp.utf-8
source $VIMRUNTIME/menu.vim

au BufEnter * execute ":lcd " . expand("%:p:h")
set foldmethod=marker
set encoding=utf-8
set nowrap
set laststatus=2
"colorscheme
syntax enable
set background=dark
colorscheme phd
"colorscheme ron
"set incsearch

set backupdir=C:\Temp
set nobackup
set noswapfile
set fo=q

"tab space
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set autoindent
set smartindent

"numbr
set number
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin
set tw=0

"Window position
set lines=52
set columns=95
winpos 683 0
set cmdheight=1

" -end }}}
"Key Mapping {{{
imap <C-BS> <C-W>
nmap <Leader><Leader> <Esc>:source $HOME/_gvimrc<CR>

nmap <F6> <ESC>i<C-R>=strftime("%Y/%m/%d (%a) %H:%M")<CR><CR>
imap <F6> <ESC>i<C-R>=strftime("%Y/%m/%d (%a) %H:%M")<CR><CR>

nmap G Gzz

"Switching Opacity
nmap ,oo :set tra=220<CR>
nmap ,on :set tra=0<CR>
nmap ,o+ :set tra+=10<CR>
nmap ,o- :set tra-=10<CR>
"Window Scaleup
nmap ,wj 10<C-W>+
nmap ,wk 10<C-W>-

"nmap <C-;> <S-A>;<Esc>
"imap <C-;> <Esc><S-A>;

nmap ,e :!explorer .<CR>

nmap ,a gg<S-V><S-G>a

nmap ,min :set lines=20<CR>:set columns=30<CR>:winpos 1100 420<CR>

nmap ,ft :set ft=

nmap ,nn :set rnu<CR>
nmap ,nr :set nornu<CR>

highlight CursorLine gui=underline guifg=NONE guibg=NONE

cmap ,ntt <Esc>:NERDTreeToggle
cmap ,ntf <Esc>:NERDTreeFind
cmap ,ntob <Esc>:OpenBookmark<Space>
cmap ,ntb <Esc>:Bookmark<Space>
nmap ,utt <Esc>:UndoTreeToggle
cmap ,nbi <Esc>:NeoBundleInstall

"バイナリ編集(xxd)モード（vim -b での起動、もしくは *.bin で発動します）
augroup BinaryXXD
        autocmd!
        autocmd BufReadPre  *.bin let &binary =1
        autocmd BufReadPost * if &binary | silent %!xxd -g 1
        autocmd BufReadPost * set ft=xxd | endif
        autocmd BufWritePre * if &binary | %!xxd -r
        autocmd BufWritePre * endif
        autocmd BufWritePost * if &binary | silent %!xxd -g 1
        autocmd BufWritePost * set nomod | endif
augroup END


" -end}}}
" auto position {{{ let g:save_window_file = expand('~/.vimwinpos')
augroup SaveWindow
  autocmd!
  autocmd VimLeavePre * call s:save_window()
  function! s:save_window()
    let options = [
      \ 'set columns=' . &columns,
      \ 'set lines=' . &lines,
      \ 'winpos ' . getwinposx() . ' ' . getwinposy(),
      \ ]
    call writefile(options, g:save_window_file)
  endfunction
augroup END

"if filereadable(g:save_window_file)
"  execute 'source' g:save_window_file
"endif
"}}}
" sound coding {{{

"autocmd CursorMovedI * :call vimproc#system_bg("~/.vim/sound/vim-key-sound.rb '" . getline('.')[col('.') - 2] . "'")

"" 効果音ディレクトリと拡張子の指定。効果音名を元にフルパスに変換出来るように。
"let s:se_path = "~/.vim/sound/type/"
"let s:se_ext = ".wav"
"function! s:change_sound_name(base_name)
"  return expand(s:se_path . a:base_name . s:se_ext)
"endfunction 
"
"" sound#play_wavのラッパ
"function! PlaySE(name)
"  call sound#play_wav(s:change_sound_name(a:name))
"endfunction
"
""function! PlaySE(name)
""  silent! exec '!afplay ' . s:se_path . a:name . s:se_ext . ' &'
""endfunction
"
"
""" テスト用。効果音名の上で<Leader><Leader>を押すと再生出来るように
""command! -nargs=1 Play :call PlaySE("<args>")
""nmap <Leader><Leader> :<C-u>Play <C-r><C-w><CR>
"
"" 補完をの完了
"autocmd CompleteDone * call PlaySE("comp")
"" バッファ移動時
"autocmd BufEnter * call PlaySE("move_buffer")
"" 入力時
""autocmd InsertCharPre * call PlaySE("type")
"" 保存時
"autocmd BufWrite * call PlaySE("save")
"" インサートモードに入る時
"autocmd InsertEnter * call PlaySE("in")
"autocmd InsertLeave * call PlaySE("out")
"" タブページ移動時
"autocmd TabEnter * call PlaySE("move")
"

" その他バインド
"nmap <silent> J J:<C-u>call PlaySE("portal2")<CR>
"nmap <silent> K K:<C-u>call PlaySE("portal2")<CR>
"nmap <silent> L L:<C-u>call PlaySE("portal2")<CR>
"nmap <silent> H H:<C-u>call PlaySE("portal2")<CR>

" 
"nmap <silent> <Esc><Esc> :<C-u>AnzuClearSearchStatus<CR>:nohlsearch<CR>:call PlaySE("splash")<CR>
"nmap <silent> <C-l><C-l> :<C-u>AnzuClearSearchStatus<CR>:nohlsearch<CR>:call PlaySE("splash")<CR>

" }}}
" auto encoding {{{
if &encoding !=# 'utf-8'
  set encoding=japan
  set fileencoding=japan
endif
if has('iconv')
  let s:enc_euc = 'euc-jp'
  let s:enc_jis = 'iso-2022-jp'
  " iconvがeucJP-msに対応しているかをチェック
  if iconv("\x87\x64\x87\x6a", 'cp932', 'eucjp-ms') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'eucjp-ms'
    let s:enc_jis = 'iso-2022-jp-3'
  " iconvがJISX0213に対応しているかをチェック
  elseif iconv("\x87\x64\x87\x6a", 'cp932', 'euc-jisx0213') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'euc-jisx0213'
    let s:enc_jis = 'iso-2022-jp-3'
  endif
  " fileencodingsを構築
  if &encoding ==# 'utf-8'
    let s:fileencodings_default = &fileencodings
    let &fileencodings = s:enc_jis .','. s:enc_euc .',cp932'
    let &fileencodings = &fileencodings .','. s:fileencodings_default
    unlet s:fileencodings_default
  else
    let &fileencodings = &fileencodings .','. s:enc_jis
    set fileencodings+=utf-8,ucs-2le,ucs-2
    if &encoding =~# '^\(euc-jp\|euc-jisx0213\|eucjp-ms\)$'
      set fileencodings+=cp932
      set fileencodings-=euc-jp
      set fileencodings-=euc-jisx0213
      set fileencodings-=eucjp-ms
      let &encoding = s:enc_euc
      let &fileencoding = s:enc_euc
    else
      let &fileencodings = &fileencodings .','. s:enc_euc
    endif
  endif
  " 定数を処分
  unlet s:enc_euc
  unlet s:enc_jis
endif
" 日本語を含まない場合は fileencoding に encoding を使うようにする
if has('autocmd')
  function! AU_ReCheck_FENC()
    if &fileencoding =~# 'iso-2022-jp' && search("[^\x01-\x7e]", 'n') == 0
      let &fileencoding=&encoding
    endif
  endfunction
  autocmd BufReadPost * call AU_ReCheck_FENC()
endif
" 改行コードの自動認識
set fileformats=unix,dos,mac
" □とか○の文字があってもカーソル位置がずれないようにする
if exists('&ambiwidth')
  set ambiwidth=double
endif
" font option:
if has('win32')
  " Windows用
  set guifont=MS_Gothic:h10:cSHIFTJIS "← h12だったものを、h10に変更
  "set guifont=MS_Mincho:h12:cSHIFTJIS
  " 行間隔の設定
  set linespace=1
  " 一部のUCS文字の幅を自動計測して決める
  if has('kaoriya')
    set ambiwidth=auto
  endif
elseif has('mac')
  set guifont=Osaka?等幅:h14
elseif has('xfontset')
  " UNIX用 (xfontsetを使用)
  set guifontset=a14,r14,k14
endif
" encoding -end}}}

" Plugin Options{{{

" autocmd dictionary each FileType
"autocmd FileType php        :set dictionary=$VIM/dict/PHP.dict,$VIM/dict/html.dict,$VIM/dict/css.dict
"autocmd FileType javascript :set dictionary=$VIM/dict/jQuery.dict,$VIM/dict/javascript.dict
"autocmd FileType css        :set dictionary=$VIM/dict/css.dict,$VIM/dict/html.dict
"autocmd FileType less       :set dictionary=$VIM/dict/css.dict,$VIM/dict/html.dict
"autocmd FileType html       :set dictionary=$VIM/dict/css.dict,$VIM/dict/html.dict
"autocmd FileType processing :set dictionary=$VIM/dict/processing.dict


"syntax setting
au FileType javascript call JavaScriptFold()
au BufRead,BufNewFile jquery.*.js set ft=javascript syntax=jquery

" ctrlp option

let g:ctrlp_use_migemo = 1
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_mruf_max = 500
let g:ctrlp_open_new_file = 1
let g:ctrlp_map = '<c-p>'

nmap ,p :<C-u>CtrlP<CR>


"neocomplcache option
let g:acp_enableAtStartup = 0
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_camel_case_completion = 1
let g:neocomplcache_enable_underbar_completion = 1
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

let $DICT_DIR='C:\Users\hiro\.vim\dict\'
let g:neocomplcache_dictionary_filetype_lists = {
            \ 'default'    : '',
            \ 'php'        : $DICT_DIR.'PHP.dict,'       .$DICT_DIR.'html.dict'  ,
            \ 'javascript' : $DICT_DIR.'javascript.dict,'.$DICT_DIR.'jQuery.dict',
            \ 'css'        : $DICT_DIR.'css.dict,'       .$DICT_DIR.'html.dict'  ,
            \ 'less'       : $DICT_DIR.'css.dict,'       .$DICT_DIR.'html.dict'  .$DICT_DIR.'bootstrap_less.dict',
            \ 'html'       : $DICT_DIR.'css.dict,'       .$DICT_DIR.'html.dict'  .$DICT_DIR.'bootstrap_less.dict',
            \ 'c'          : $DICT_DIR.'c.dict',
            \ 'cpp'        : $DICT_DIR.'cpp.dict'
            \ }
if !exists('g:neocomplcache_keyword_patterns')
        let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'


""neocomplete option
"let g:neocomplete#enable_at_startup = 1
"let g:neocomplete#sources#dictionary#dictionaries = {
"            \ 'default'    : '',
"            \ 'php'        : $VIM.'/dict/PHP.dict,'       .$VIM.'/dict/html.dict'  ,
"            \ 'javascript' : $VIM.'/dict/javascript.dict,'.$VIM.'/dict/jQuery.dict',
"            \ 'css'        : $VIM.'/dict/css.dict,'       .$VIM.'/dict/html.dict'  ,
"            \ 'less'       : $VIM.'/dict/css.dict,'       .$VIM.'/dict/html.dict'  ,
"            \ 'html'       : $VIM.'/dict/css.dict,'       .$VIM.'/dict/html.dict',
"            \ 'c'          : $VIM.'/dict/c.dict',
"            \ 'cpp'        : $VIM.'/dict/cpp.dict'
"            \ }
"let g:neocomplete#enable_smart_case = 1
"let g:neocomplete#sources#syntax#min_keyword_length = 3
"let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" neosnippet option
let g:neosnippet#snippets_directory='$HOME/.vim/snippets, $HOME/.vim/bundle/snipmate-snippets/snippets'
imap <c-k> <Plug>(neosnippet_expand_or_jump)
smap <c-k> <Plug>(neosnippet_expand_or_jump)
imap <expr><C-l>
\ neosnippet#expandable() <Bar><Bar> neosnippet#jumpable() ?
\ '\<Plug>(neosnippet_expand_or_jump)' : '\<C-n>'

" unite.vim option
nmap ,ub :<C-u>Unite buffer<CR>
nmap ,uc :<C-u>Unite file<CR>
nmap ,uh :<C-u>Unite file_mru<CR>
nmap ,uf :<c-u>UniteWithBufferDir -buffer-name=files file -direction=botright <cr>
map ,ur :Unite -buffer-name=register register<CR>
" history/yank を有効化する
let g:unite_source_history_yank_enable = 1
map ,uy     :Unite history/yank<CR>


" NERDTreeToggle option 
let g:nerdtreetoggle_enable_at_startup = 1

" undotree.vim option 
let g:undotree_EnableAtStartup = 1
let g:undotree_SetFocusWhenToggle = 1
let g:undotree_SplitLocation = 'topleft'
let g:undotree_SplitWidth = 35
let g:undotree_diffAutoOpen = 1
let g:undotree_diffpanelHeight = 25
let g:undotree_RelativeTimestamp = 1
let g:undotree_TreeNodeShape = '*'
let g:undotree_HighlightChangedText = 1
let g:undotree_HighlightSyntax = "UnderLined"

" TweetVim
nmap ,twl :TweetVimHomeTimeline<Enter>
nmap ,twe :TweetVimSay<Enter>10<C-w><Esc>:set<Space>winheight=10<Enter>
nmap ,twm :TweetVimMentions<Enter>
nmap ,tws :TweetVimSwitchAccount<Space>
nmap ,twh :let<Space>g:tweetvim_footer="#"<Left>

let g:tweetvim_open_say_cmd = 'botright split'

" align.vim option
"let g:Align_enable_at_startup = 1;
let g:Align_xstrlen=3

" lightLine.vim option 

let g:lightlineEnableAtStartup = 1
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'component': {
      \   'readonly': '%{&readonly?"x":""}',
      \ },
      \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
      \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
      \ }
"let g:lightline = {
"      \ 'colorscheme': 'wombat',
"      \ 'component': {
"      \   'readonly': '%{&filetype=="help"?"":&readonly?"⭤":""}',
"      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}'
"      \ },
"      \ 'separator': { 'left': '⮀', 'right': '⮂' },
"      \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
"      \ }

" smoos-scroll.vim option 
"let g:ac_smooth_scroll_du_sleep_time_msec = 2

"" vim-processing 
"let g:quickrun_enable_at_startup = 1
"let g:quickrun_config = {}
""let g:quickrun_config.processing =  {
""      \     'command': 'processing-java',
""      \     'exec': '%c --sketch=$PWD/ --output=/Library/Processing --run --force',
""      \   }
"let g:quickrun_config.cpp =  {
"      \     'command': 'g++',
"      \     'exec': '-std=c++11',
"      \   }
""<F10>で保存後Processing実行
"function! RunP5()
"    silent execute '!start C:\Program Files\AutoHotkey\exes\vimp5.exe ' . "\"" . expand("%:r"). "\" " . "\"" . expand("%:p"). "\""
"endfunction
"autocmd FileType processing nmap <silent> <F10> :up<CR>:call RunP5()<CR>

"startify options

nmap ,sf :Startify<Enter>
" startifyのヘッダー部分に表示する文字列を設定する(dateコマンドを実行して日付を設定している)
let g:startify_custom_header = [
\"                                    ..",
\"                                  .::::.",
\"                     ___________ :;;;;:`____________",
\"                     \_________/ ?????L \__________/",
\"                       |.....| ????????> :.......'",
\"                       |:::::| $$$$$$'`.:::::::' ,",
\"                      ,|:::::| $$$$'`.:::::::' .OOS.",
\"                    ,7D|;;;;;| $$'`.;;;;;;;' .OOO888S.",
\"                  .GDDD|;;;;;| ?`.;;;;;;;' .OO8DDDDDNNS.",
\"                   'DDO|IIIII| .7IIIII7' .DDDDDDDDNNNF`",
\"                     'D|IIIIII7IIIII7' .DDDDDDDDNNNF`",
\"                       |EEEEEEEEEE7' .DDDDDDDNNNNF`",
\"                       |EEEEEEEEZ' .DDDDDDDDNNNF`",
\"                       |888888Z' .DDDDDDDDNNNF`",
\"                       |8888Z' ,DDDDDDDNNNNF`",
\"                       |88Z'    'DNNNNNNN'",
\"                       '''        'MMMM'",
\"                                    ''",
\" ",
  \]
" \ map(split('date', '\n'), '"   ". v:val') + ['',''],
" デフォルトだと、最近使ったファイルの先頭は数字なので、使用するアルファベットを指定
let g:startify_custom_indices = ['a','b','c','d','f','g','i','m','n','p','r','s','t','u','v','w','x','y','z']

" よく使うファイルをブックマークとして登録しておく
let g:startify_bookmarks = [
  \ '~/_gvimrc',
  \ '~/localrepos/blog/vac_20131215.md',
  \ ]


"foldCC config

set foldtext=foldCC#foldtext()
let g:foldCCtext_head = '"::>"'

nmap ,spk :Splash ~/.vim/splash/into.txt<CR>

"autocmd BufRead <ESC>:source $HOME/_gvimrc<CR>
"autocmd BufRead * echo BufRead
"autocmd VimEnter echo VimEnter
"au GUIEnter echo GUIEnter

"over.vim config
" over.vimの起動
nmap <silent> <Leader>ov :OverCommandLine<CR>
" カーソル下の単語をハイライト付きで置換
nmap <silent> <Leader>oV :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
" コピーした文字列をハイライト付きで置換

"vim-operator-replace

nmap <c-p> <Plug>(operator-replace)

"easy-motion config

let g:EasyMotion_keys='hjklasdfyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
let g:EasyMotion_smartcase=1
let g:EasyMotion_use_migemo=1
let g:EasyMotion_leader_key="'"
let g:EasyMotion_grouping=1
hi EasyMotionTarget ctermbg=none ctermfg=red
hi EasyMotionShade  ctermbg=none ctermfg=blue

" quickrun config
let g:quickrun_config={'*': {'split': ''}}

" vimshell config

"
let g:vimshell_prompt = "% "
let g:vimshell_secondary_prompt = "> "
let g:vimshell_user_prompt = 'getcwd()'
"let g:vimshel_right_prompt = "('ω' )"
autocmd FileType vimshell call vimshell#hook#add('postexec', 'change_prompt', 'g:my_vimshell_change_prompt')

function! g:my_vimshell_change_prompt(args, context)
    let g:vimshell_prompt = getcwd() . "% "
"    call vimshell#set_highlight()
endfunction



"}}}
"
