[user]
    name = elzup
    email = guild0105@gmail.com
[color]
  # colorの設定(以下のコマンドは自動で色つける)
    status = auto
    diff = auto
    branch = auto
    interactive = auto
    grep = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
[push]
    default = tracking       # defaultのpush先はtrackingしているリポジトリ
[core]
    autoCRLF = false
    excludesfile = /Users/hiro/.gitignore_global
    editor = vim -c \"set fenc=utf-8\"
    # excludesfile = /Users/hiro/.gitignore_globals/*.gitignore
[alias]
    st = status
    s = status -s
    sh = show
    so = remote show origin
    ft = fetch
    fa = fetch --all
    p = !"git pull; git submodule foreach git pull origin master"
    c = clone --recursive
    up = pull --rebase       # pull rebase
    rbm = rebase master      # masterへのrebaseはよく使うのでalias
    ad = add
    ci = commit -a           # modifiedなファイルを全てstageへ
    cm = commit -am          # コミットメッセージ
    cam = commit -a --amend  # 直前のcommitを修正
    co = checkout
    cob = checkout -b
    me = merge
    mt = master
    pom = push origin master -u
    rma = rm --cached -r .
    remori = remote remove origin
    cmi = commit -am 'Initialize commit'
    tags = tag -l
    branches = branch -a
    remotes = remote -v
    amend = commit --amend --reuse-message=HEAD
    rh = reset --hard
  # branch関連
    br = branch
    ba = branch -a           # originも含めた全てのbranchを表示
    bm = branch -m           # rename
    bn = branch --no-merged  # mergeしてないbranchを表示
    branch-delmerged = !git branch --merged | grep -vE '^\\*|master$|develop$' | xargs -I % git branch -d %
    bd = branch -D
  # log関連
    wc = whatchanged         # logに変更されたファイルも一緒に出す
    ls = log --stat          # logに変更されたファイルも一緒に出す
    lp = log -p              # diffも一緒に出す
    la = log --pretty=\"format:%ad %h (%an): %s\" --date=short  # ざっくりログ出す
    lr = log origin          # originのlog
    oneline = log --pretty=oneline
    ranking = shortlog -s -n --no-merges
  # logをtree表示
    logg = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
    log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  # diff関連
    dm = diff master           # masterとのdiff
    dw = diff --color-words    # 単語単位でいろつけてdiff
    dc = diff --cached         # addされているものとのdiff
    ds = diff --staged         # 同上(1.6.1移行)
    dis = diff --stat           # stat表示
    dim = diff --shortstat      # 行数のみ
    d1 = diff HEAD~            # HEADから1つ前とdiff
    d2 = diff HEAD~~           # HEADから2つ前とdiff
    d3 = diff HEAD~~~          # HEADから3つ前とdiff
    d4 = diff HEAD~~~~         # HEADから4つ前とdiff
    d5 = diff HEAD~~~~~        # HEADから5つ前とdiff
    d10 = diff HEAD~~~~~~~~~~  # HEADから10前とdiff
  # mergeの際にconflictが起きたファイルを編集
    edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  # mergeの際にconflictが起きたファイルをadd
    add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
  # grep関連
    gr = grep
    gn = grep -n
    la = !PAGER=emoji_filter git log --oneline -20 # 絵文字の表示
  # hub関連
    pr = pull-request -o -F /Users/hiro/.pullreqmessage.txt -b elzzup:develop -h elzzup:$(git rev-parse --short @)
    conflicts = !git ls-files -u | cut -f 2 | sort -u
    dsf = "!f() { [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\" && git diff --color \"$@\" | diff-so-fancy | less --tabs=4 -RFX; }; f"
[github]
    user = elzup
[difftool "sourcetree"]
    cmd = opendiff \"$LOCAL\" \"$REMOTE\"
    path = 
[mergetool "sourcetree"]
    cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
    trustExitCode = true
[hub]
    protocol = ssh
[merge]
    ff = false
[pull]
    ff = only
[pager]
    log = diff-so-fancy | less --tabs=4 -RFX
    show = diff-so-fancy | less --tabs=4 -RFX
    # diff = diff-so-fancy | less --tabs=4 -RFX
[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    required = true
[commit]
    template = /Users/hiro/.gitcommit_template
