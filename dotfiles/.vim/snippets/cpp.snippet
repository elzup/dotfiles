snippet temp_list
    #include <iostream>
    #include <list>
    
    using namespace std;
    
    int main(void) {
        int n;
        cin >> n;
        list<int> li;
        for(int i = 0; i < n; i++) {
            int j;
            cin >> j;
            li.push_back(j);
        }
        int result = 0;
        cout << result << endl;
        return 0;
    }
snippet temp_easy1
    #include <iostream>
    
    using namespace std;
    
    int main(void) {
        int a;
        cin >> a;
        cout << ${2:a} << endl;
        return 0;
    }
snippet temp_easy2
    #include <iostream>
    
    using namespace std;
    
    int main(void) {
        int a, b;
        cin >> a >> b;
        cout << ${2:a + b} << endl;
        return 0;
    }
snippet temp_easy3
    #include <iostream>
    
    using namespace std;
    
    int main(void) {
        int a, b, c;
        cin >> a >> b >> c;
        cout << ${2:a + b + c} << endl;
        return 0;
    }
snippet start
    // include
    //--------------------------------------------
    #include <cstdio>
    #include <cstdlib>
    #include <cmath>
    #include <climits>
    #include <cfloat>
    #include <map>
    #include <utility>
    #include <set>
    #include <iostream>
    #include <memory>
    #include <string>
    #include <vector>
    #include <algorithm>
    #include <functional>
    #include <sstream>
    #include <complex>
    #include <stack>
    #include <queue>
    #include <cstring>
    #include <numeric>
    #include <cassert>
    using namespace std;
    //conversion
    //--------------------------------------------
    inline int toInt(string s) {int v; istringstream sin(s);sin>>v;return v;}
    template<class T> inline string toString(T x) {ostringstream sout;sout<<x;return sout.str();}
    //repetition
    //--------------------------------------------
    #define FOR(i,a,b) for(int i=(a);i<(b);++i)
    #define REP(i,n) FOR(i,0,n)
    #define all(a) a.begin(),a.end()
    //constant
    //--------------------------------------------
    const double EPS = 1e-10;
    const double PI = acos(-1.0);
    //
    typedef long long LL;
    typedef stringstream SS;
    //clear memory
    //--------------------------------------------
    #define CLR(a) memset((a), 0, sizeof(a))
    //debug
    //--------------------------------------------
    #define dump(x)  cerr << #x << " = " << (x) << endl;
    #define debug(x) cerr << #x << " = " << (x) << " (L" << __LINE__ << ")" << " " << __FILE__ << endl;
    //array
    string implode( const string &glue, const vector<string> &pieces ) { string a; int leng=pieces.size(); for(int i=0; i<leng; i++) { a+= pieces[i]; if (  i < (leng-1) ) a+= glue; } return a; }
    //mode
    #define cout_set_float std::cout.setf(std::ios_base::scientific,std::ios_base::floatfield);

    int main() {
        ${0}
        return 0;
    }

snippet start_code
    // {{{ head
    // include
    //--------------------------------------------
    #include <cstdio>
    #include <cstdlib>
    #include <cmath>
    #include <climits>
    #include <cfloat>
    #include <map>
    #include <utility>
    #include <set>
    #include <iostream>
    #include <fstream>
    #include <memory>
    #include <string>
    #include <vector>
    #include <algorithm>
    #include <functional>
    #include <sstream>
    #include <complex>
    #include <stack>
    #include <queue>
    #include <cstring>
    #include <numeric>
    #include <cassert>
    using namespace std;
    //conversion
    //--------------------------------------------
    inline int toInt(string s) {int v; istringstream sin(s);sin>>v;return v;}
    template<class T> inline string toString(T x) {ostringstream sout;sout<<x;return sout.str();}
    //repetition
    //--------------------------------------------
    #define FOR(i,a,b) for(int i=(a);i<(b);++i)
    #define REP(i,n) FOR(i,0,n)
    #define all(a) a.begin(),a.end()
    //constant
    //--------------------------------------------
    const double EPS = 1e-10;
    const double PI = acos(-1.0);
    //
    typedef long long LL;
    typedef stringstream SS;
    //clear memory
    //--------------------------------------------
    #define CLR(a) memset((a), 0, sizeof(a))
    //debug
    //--------------------------------------------
    #define dump(x)  cerr << #x << " = " << (x) << endl;
    #define debug(x) cerr << #x << " = " << (x) << " (L" << __LINE__ << ")" << " " << __FILE__ << endl;
    //array
    string implode( const string &glue, const vector<string> &pieces ) { string a; int leng=pieces.size(); for(int i=0; i<leng; i++) { a+= pieces[i]; if (  i < (leng-1) ) a+= glue; } return a; }
    //mode
    #define cout_set_float std::cout.setf(std::ios_base::scientific,std::ios_base::floatfield);
    //input config
    #define Q_SPLIT "---"
    #define INPUT_FILENAME "input.txt"
    
    void solve();
    bool IsFileExisting(const char*);
    
    int main() {
    
        if (IsFileExisting(INPUT_FILENAME)) {
            // local debug
            FILE* fp_in = freopen(INPUT_FILENAME, "r", stdin);
            string check;
            int s = 0;
            do {
                solve();
                check = "";
                cin >> check;
            } while (check == Q_SPLIT && s++ < 100);
        } else {
            // production
            solve();
        }
        return 0;
    }
    // }}} -end
    
    void solve() {
        int a, b, c;
        cin >> a >> b >> c;
        int m = a % (b + c);
        cout << ((m != 0 && m <= b) ? "Ant" : "Bug") << endl;
    }
    
    // {{{ funcs
    
    bool IsFileExisting(const char* pszFile)
    {
      FILE *pf;
    
      if ((pf = fopen(pszFile, "r")) == 0) {
        return 0;
      }
      fclose(pf);
    
      return 1;
    }
    
    // }}}
