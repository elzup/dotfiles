snippet start
    <?php
    // {{{ get input module
    // debug input file name
    define('DEBUG_FN', 'input.txt');
    /* first module start (setup $input) */
    if(file_exists(DEBUG_FN)) 
    {
        $inputs = explode("\n---\n", file_get_contents(DEBUG_FN));
        define('DEBUG', TRUE);
    } else 
    {
        $inputs = array(file_get_contents('php://stdin'));
        define('DEBUG', FALSE);
    }
    foreach ($inputs as $i => $input) {
        if (DEBUG) {
            echo "\n----- {$i} -----\n";
            $time_start = microtime(true);
        }
        solve($input);
        if (DEBUG) {
            $time_end = microtime(true);
            $time = $time_end - $time_start;
            echo sprintf("\n[%.5fms]", $time * 1000);
        }
    }
    // }}} -end
    
    function solve($input) {
        ${0}
    }
    
    // {{{ funcs
    /*
     *---------------------------------------------------------------
     * funcs
     *---------------------------------------------------------------
     */
    
    /**
     * 0 only debug output
     */
    
    function unset_multi(array $arr, array $unset_keys, $rename_key = FALSE)
    {
        foreach ($unset_keys as $key)
        {
            unset($arr[$key]);
        }
        if ($rename_key)
            $arr = array_values($arr);
        return $arr;
    }
    function partition_word ($line) 
    {
        return explode(" ", rtrim($line));
    }
    function partition_line ($text) 
    {
        $text = rtrim(gather_linereturn (rtrim($text)));
        return explode("\n", $text);
    }
    function partition_word_all($text) 
    {
        $lines = partition_line($text);
        $values = array();
        foreach ($lines as $line) 
        {
            $values[] = partition_word($line);
        }
        return $values;
    }
    function gather_linereturn($str) 
    {
        return str_replace(array("\r\n", "\r"), "\n", $str);
    }
    function pc_permute($items, &$results =  array(), $perms = array()) {
        if (empty($items)) { 
            //        print join(' ', $perms) . "\n";
            $results[] = $perms;
        }  else {
            for ($i = count($items) - 1; $i >= 0; --$i) {
                $newitems = $items;
                $newperms = $perms;
                list($foo) = array_splice($newitems, $i, 1);
                array_unshift($newperms, $foo);
                pc_permute($newitems, $results, $newperms);
            }
        }
    }
    function trim_returns($str) {
        return str_replace(array("\r\n", "\r", "\n"), "", $str);
    }


    // }}} --end
    
snippet unset_multi
abbr 配列のから指定した配列を取り除く
    unset_multi(${1:$arr}, ${2:$unset_keys}, ${3:$rename_key = FALSE})

snippet partition_word
abbr 空白で分割して配列で返す
    partition_word(${1:line})

snippet partition_line
abbr 改行で分割して配列で返す
    partition_line(${1:text})

snippet partition_word_all
abbr 改行毎,空白区切りの二次配列を返す
    partition_word_all(${1:text})

snippet trim_returns
abbr 改行を取り除いて返す
    trim_returns(${1:str})

snippet get_bit_nums
abbr ビットから1の立つindex列をのリストを返す [loadfunc_get_bit_nums]
    get_bit_nums(${1:n})

snippet loadfunc_get_bit_nums
abbr get_bit_nums関数を展開
    function get_bit_nums($n) {
        $list = [];
        for ($i = 0; $i < 10; $i++) {
            if (($n >> $i) & 1) {
                $list[] = $i;
            }
        }
        return $list;
    }

snippet ring_diff
abbr 循環リスト上のインデックスを返す [loadfunc_ring_diff]
    ring_diff(${1:i}, ${2:len})

snippet loadfunc_ring_diff
abbr ring_diff関数を展開
    function ring_diff($i, $len) {
        $m = ceil($len / 2);
        return $i <= $m ? $i : ($len - $i);
    }


snippet /*
    /*
    *---------------------------------------------------------------
    * ${1:title}
    *---------------------------------------------------------------
    */
    ${0}
snippet file_get_contents_post
    $url = "http://${1:localhost/}";
    $data = array(
        "param1" => "data1",
        "param2" => "data2"
    );
    $data = http_build_query($data, "", "&");
    
    //header
    $header = array(
        "Content-Type: application/x-www-form-urlencoded",
        "Content-Length: ".strlen($data)
    );
    
    $context = array(
        "http" => array(
            "method"  => "POST",
            "header"  => implode("\r\n", $header),
            "content" => $data
        )
    );
    $f = file_get_contents($url, false, stream_context_create($context));
    ${0}

snippet error_print
abbr エラー強制表示
    ini_set('display_errors', '1');
    error_reporting(E_ALL);

snippet input
abbr 標準入力
    $line = trim(fgets(STDIN));

snippet input_cr
abbr 標準入力と改行分割
    $lines = explode("\n", trim(fgets(STDIN)));

snippet print_httpheader
abbr httpヘッダを表示
    print_r(get_headers('${1:http://}'));

snippet speedtest_start
abbr 実行時間計測
options head
    $time_start = microtime(true);

snippet speedtest_end
abbr 実行時間計測終了
options head
    $time_end = microtime(true);
    $time = $time_end - $time_start; 
    echo "time: {$time}";

snippet is_image
abbr 画像ファイルが存在するかチェック
    function is_image($url) {
        return !!@exif_imagetype($url);
    }

snippet get_pc_screen_size
abbr 現在の画面サイズを取得する
    function get_pc_screen_size() {
        return explode('x', trim(\`xdpyinfo | grep dimensions | perl -pe 's|.*?(\d*x\d*).*|\\1|'\`));
    }
